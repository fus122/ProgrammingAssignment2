makeCacheMatrix <- function( x = matrix() ) {
## seta a propriedade de inversao
a <- NULL
## Definicao da Matriz
set <- function( matrix ) {
g <<- matrix
a <<- NULL
}
## Obtencao da Matriz
get <- function() {
g
}
## Metodo para inversao
SetMatrizInversa <- function(inverse) {
a <<- inverse
}
## Obtencao da matriz inversa
getMatrizInversa <- function() {
a
}
## lista os metodos
list(set = set, get = get,
SetMatrizInversa = SetMatrizInversa,
getMatrizInversa = getMatrizInversa)
}
makeCacheMatrix <- function( g = matrix() ) {
+
+     ## seta a propriedade de inversao
+
+     a <- NULL
+
+     ## Definicao da Matriz
+
+     set <- function( matrix ) {
+         g <<- matrix
+         a <<- NULL
+     }
+
+     ## Obtencao da Matriz
+
+     get <- function() {
+
+         g
+     }
+
+     ## Metodo para inversao
+
+     SetMatrizInversa <- function(inverse) {
+
+         a <<- inverse
+     }
+
+     ## Obtencao da matriz inversa
+     getMatrizInversa <- function() {
+
+         a
+     }
+
+     ## lista os metodos
+
+     list(set = set, get = get,
+          SetMatrizInversa = SetMatrizInversa,
+          getMatrizInversa = getMatrizInversa)
+ }
makeCacheMatrix <- function( g = matrix() ) {
## seta a propriedade de inversao
a <- NULL
## Definicao da Matriz
set <- function( matrix ) {
g <<- matrix
a <<- NULL
}
## Obtencao da Matriz
get <- function() {
g
}
## Metodo para inversao
SetMatrizInversa <- function(inverse) {
a <<- inverse
}
## Obtencao da matriz inversa
getMatrizInversa <- function() {
a
}
## lista os metodos
list(set = set, get = get,
SetMatrizInversa = SetMatrizInversa,
getMatrizInversa = getMatrizInversa)
}
## Duas funcoes que retornarao do cache matriz invertida
## makeCacheMatrix cria uma matriz especial a ser invertida
##
makeCacheMatrix <- function( g = matrix() ) {
## seta a propriedade de inversao
a <- NULL
## Definicao da Matriz
set <- function( matrix ) {
g <<- matrix
a <<- NULL
}
## Obtencao da Matriz
get <- function() {
g
}
## Metodo para inversao
SetMatrizInversa <- function(inverse) {
a <<- inverse
}
## Obtencao da matriz inversa
getMatrizInversa <- function() {
a
}
## lista os metodos
list(set = set, get = get,
SetMatrizInversa = SetMatrizInversa,
getMatrizInversa = getMatrizInversa)
}
cacheSolve <- function(x, ...) {
g <- g$getMatrizInversa()
## Houve mudanca?
if( !is.null(g) ) {
message("Obtendo o dado do Cache")
return(g)
}
## Busca a matriz
data <- x$get()
## calcula o inverso
g <- solve(data) %*% data
## estabele o inverso do objeto g
x$SetMatrizInversa(g)
## retorna a matriz
g
}
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
